# -*- coding: utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MembersController do
  before do
    @kato = Factory.create(:member, :name => 'kato')
    @oda = Factory.create(:member, :name => 'oda')
    login_as(@kato)
  end

  describe "GET index" do
    context "すべての Member オブジェクトの一覧が得られる" do
      before do
        get :index
      end
      it { assigns(:members).should =~ [@kato, @oda] }
      it { response.should be_success }
      it { response.should render_template('index') }
    end
    context "ログインせずに /members にアクセスするとトップにリダイレクトされる" do 
      before do
        logout
      end
      subject { get :index }
      it { should redirect_to(root_path) }
    end
  end

  describe "GET show" do
    before do 
      Member.stubs(:find).with("100").returns(@oda)
      get :show, :id => "100"
    end
    it "指定されたメンバーが得られる" do
      assigns(:member).should == @oda
    end
    it { response.should be_success }
    it { response.should render_template('show') }
  end

  describe "GET profile" do 
    before do 
      get :profile
    end
    it "現在ログインしているユーザの情報が得られる" do 
      assigns(:member).should == @kato
    end
    it { response.should be_success }
    it { response.should render_template('profile') }
  end

  describe "GET events" do 
    before do 
      @my_event = Factory.create(:event, :name => 'my event', 
                                 :organizer => @kato)
      @oda_event = Factory.create(:event, :name => 'oda event',
                                  :organizer => @oda)
      get :events
    end
    it "主催しているイベントの一覧が得られる" do 
      assigns(:events).should == [@my_event]
    end
    it { response.should be_success }
    it { response.should render_template('events') }
  end

  describe "GET new" do
    before do 
      @given_attributs = { 
        :name => 'name',
        :twitter_id => 'twitter',
        :profile => 'profile',
        :blog_url => 'blog',
        :provider => 'provider',
        :birthday => Date.parse('2010-03-10')
      }
      get :new, { }, { :member => @given_attributs, :uid => 'uid'}
    end
    it "新規で作成されるメンバーには既に session の内容がセットされている" do
      assigns(:member).name.should == "name"
      assigns(:member).twitter_id.should == "twitter"
      assigns(:member).profile.should == "profile"
      assigns(:member).blog_url.should == "blog"
      assigns(:member).provider.should == "provider"
      assigns(:member).birthday.should == Date.parse('2010-03-10')
    end
    it { response.should be_success }
    it { response.should render_template('new') }
  end

  describe "GET edit" do
    before do 
      Member.stubs(:find).with("300").returns(@kato)
    end
    it "編集対象のプロファイルが @member にセットされる" do
      get :edit, :id => "300"
      assigns(:member).should == @kato
    end

    it "ログインユーザ以外のプロファイルを編集しようとすると、
        メンバー一覧にリダイレクトされる" do
      login_as(@oda)
      (get :edit, :id => "300").should redirect_to(members_path)
    end
  end

  describe "POST create" do
    describe "入力した内容が正常であった場合" do
      before do
        @normal_member = Factory.build(:member, :name => 'normal')
        Member.stubs(:new).with({'name' => 'normal'}).returns(@normal_member)
        post :create, :member => { 'name' => 'normal'}
      end
      it { assigns(:member).should == @normal_member }
      it { response.should redirect_to member_path(@normal_member) }
    end

    describe "入力した内容に問題があった場合" do 
      before do 
        Member.any_instance.expects(:save).returns(false)
      end
      subject { post :create, :member => { 'name' => 'invalid'} }
      it { should render_template('new') }
    end
  end

  describe "PUT update" do
    describe "編集された内容が正常であった場合" do
      before do 
        @normal_member = Factory.build(:member, :name => 'normal', :address => 'where')
        Member.stubs(:find).with("37").returns(@normal_member)
      end
      it "member#update_attributes が呼び出される" do
        @normal_member.expects(:update_attributes).with({ 'address' => 'here'})
        put :update, :id => "37", :member => {'address' => 'here'}
      end

      it "@member 変数に指定されたメンバーの内容が保持されている" do
        put :update, :id => "37", :member => { 'address' => 'here' }
        assigns(:member).address.should == 'here'
      end

      it "プロフィールページにリダイレクトする" do
        put :update, :id => "37", :member => { 'address' => 'here'}
        response.should redirect_to profile_path
      end
    end

    describe "編集された内容に不備があった場合" do
      before do 
        @invalid_member = Factory.build(:member, :name => 'invalid', :address => 'where')
        Member.stubs(:find).with("37").returns(@invalid_member)
        @invalid_member.stubs(:update_attributes).returns(false)
      end
      it "再度編集ページを表示する" do
        put :update, :id => "37"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before do 
      @normal_member = Factory.build(:member, :name => 'normal')
      Member.stubs(:find).with("37").returns(@normal_member)
    end
    it "Member#destroy が該当のメンバーに対して呼び出される" do
      @normal_member.expects(:destroy)
      delete :destroy, :id => "37"
    end

    it "ユーザを削除すると、ログイン画面に戻る" do
      (delete :destroy, :id => "37").should redirect_to root_path
    end
  end

end
